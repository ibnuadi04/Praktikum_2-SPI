//Program arduino untuk Master Data Byte

void initSPI_Master() 
{
  DDRB |= (1<<2)|(1<<3)|(1<<5);   // SCK, MOSI dan SS menj adi output 
  DDRB &= ~(1<<4);                // MISO menjadi input 
  SPCR |= (1<<MSTR);              // SPI sebagai master 
  SPCR |= (1<<SPR0)|(1<<SPR1);    // Pembagi clock = 128 
  SPCR |= (1<<SPE);               // Aktifkan SPI
}

void setup() 
{
  initSPI_Master();

  pinMode(2, INPUT); 
  pinMode(3, INPUT); 
  pinMode(4, INPUT); 
  digitalWrite(2, HIGH); 
  digitalWrite(3, HIGH); 
  digitalWrite(4, HIGH);
}

void loop() 
{
  if(digitalRead(2)==LOW) 
    kirimData(5); 
  else if(digitalRead(3)==LOW)
    kirimData(10); 
  else if(digitalRead(4)==LOW)
    kirimData(15); 
}

void kirimData(unsigned char data) 
{ 
  SPDR = data;                     // Kirim data 
  while(!(SPSR & (1<<SPIF)));      // Tunggu sampai pengiriman  selesai 
  delay(50);
}

//Program arduino untuk Slave Data Byte

#include <LiquidCrystal.h>
LiquidCrystal lcd(A0, A1, A2, A3, A4, A5);
unsigned char data;

void initSPI_Slave() 
{
  DDRB &= ~((1<<2)|(1<<3)|(1<<5));     // SCK, MOSI dan SS menjadi input
  DDRB |= (1<<4);                      // MISO menjadi output 
  SPCR &= ~(1<<MSTR);                  // SPI sebagai slave
  SPCR |= (1<<SPR0)|(1<<SPR1);         // Pembagi clock = 128
}

void setup() 
{ 
  initSPI_Slave();
  lcd.begin(16, 2);
  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("SPI Slave Begin");
}

void loop() 
{
  while(!(SPSR & (1<<SPIF)));        // Tunggu data masuk
  data = SPDR;                       // Menyimpan isi register SPDR ke variabel data 
  lcd.setCursor(0,0);
  lcd.print("Data Receive ==>  ");
  lcd.setCursor(0,1); 
  lcd.print(data,HEX);
}

//Program arduino untuk Master Data Teks

void initSPI_Master() 
{
  DDRB |= (1<<2)|(1<<3)|(1<<5);           // SCK, MOSI dan SS menjadi output 
  DDRB &= ~(1<<4);                        // MISO menjadi input 
  SPCR |= (1<<MSTR);                      // SPI sebagai master 
  SPCR |= (1<<SPR0)|(1<<SPR1);            // Pembagi clock = 128 
  SPCR |= (1<<SPE);                       // Aktifkan SPI
}

void setup() 
{
  initSPI_Master();
  pinMode(2, INPUT); 
  pinMode(3, INPUT); 
  pinMode(4, INPUT); 
  digitalWrite(2, HIGH); 
  digitalWrite(3, HIGH); 
  digitalWrite(4, HIGH);
}

void loop() 
{
  if(digitalRead(2)==LOW) 
  { 
    kirimData("Hallo\r\n");
  }
  else if(digitalRead(3)==LOW)
  { 
    kirimData("Apa\r\n");
  }
  else if(digitalRead(4)==LOW)
  { 
    kirimData("Kabar\r\n"); 
  } 
}

void kirimData(char *string) 
{
  int panjangString = strlen(string);
  for(int i=0; i<panjangString; i++) 
  { 
    SPDR = string[i];
    while(!(SPSR & (1<<SPIF))); 
    delay(10); 
  }
}

//Program arduino untuk Slave Data Teks

#include <LiquidCrystal.h>
LiquidCrystal lcd(A0, A1, A2, A3, A4,A5); 
String dataString = ""; 
char data;

void initSPI_Slave() 
{
  DDRB &= ~((1<<2)|(1<<3)|(1<<5));     // SCK, MOSI dan SS me njadi input 
  DDRB |= (1<<4);                      // MISO menjadi output 
  SPCR &= ~(1<<MSTR);                  // SPI sebagai slave 
  SPCR |= (1<<SPR0)|(1<<SPR1);         // Pembagi clock = 128 
  SPCR |= (1<<SPE);                    // Aktifkan SPI 
}

void setup() 
{
  initSPI_Slave();
  lcd.begin(16, 2); 
  lcd.clear(); 
  lcd.setCursor(0,0); 
  lcd.print("SPI Slave Begin"); 
} 

void loop() 
{
  while(!(SPSR & (1<<SPIF))); // Tunggu data masuk 
  data = SPDR;                // Menyimpan isi regis ter SPDR ke variabel data 
  if(data!='\n') 
  {
    if(data!='\r') 
    {   
      dataString += data;     // Simpan data ke dala m string 
    }
  }
  else 
  {
    lcd.clear(); 
    lcd.setCursor(0,0);
    lcd.print("Data Receive ==> ");
    lcd.setCursor(0,1); 
    lcd.print(dataString);    // Menampilkan string ke LCD
    dataString = "";
  }
}


//Program arduino untuk Slave Data Teks with Serial Monitor

#include <LiquidCrystal.h>
LiquidCrystal lcd(A0, A1, A2, A3, A4,A5); 
String dataString = ""; 
char data;

void initSPI_Slave() 
{
  DDRB &= ~((1<<2)|(1<<3)|(1<<5));     // SCK, MOSI dan SS me njadi input 
  DDRB |= (1<<4);                      // MISO menjadi output 
  SPCR &= ~(1<<MSTR);                  // SPI sebagai slave 
  SPCR |= (1<<SPR0)|(1<<SPR1);         // Pembagi clock = 128 
  SPCR |= (1<<SPE);                    // Aktifkan SPI 
}

void setup() 
{
  initSPI_Slave();
  lcd.begin(16, 2); 
  lcd.clear(); 
  lcd.setCursor(0,0); 
  lcd.print("SPI Slave Begin"); 
  Serial.begin(9600);
} 

void loop() 
{
  while(!(SPSR & (1<<SPIF))); // Tunggu data masuk 
  data = SPDR;                // Menyimpan isi regis ter SPDR ke variabel data 
  if(data!='\n') 
  {
    if(data!='\r') 
    {   
      dataString += data;     // Simpan data ke dala m string 
    }
  }
  else 
  {
    lcd.clear(); 
    lcd.setCursor(0,0);
    lcd.print("Data Receive ==> ");
    lcd.setCursor(0,1); 
    lcd.print(dataString);    // Menampilkan string ke LCD
    dataString = "";
    Serial.print("Data Receive ==> ");
    Serial.println(dataString);
  }
}








